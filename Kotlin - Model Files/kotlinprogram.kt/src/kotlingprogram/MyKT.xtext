// automatically generated by Xtext
grammar kotlinprogram.MyKT with org.eclipse.xtext.common.Terminals

import "http://www.example.org/kotlinMetaModel" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

KotlinProgram returns KotlinProgram:
	{KotlinProgram}
	(comments+=Comment ( "," comments+=Comment)*)?
	(types+=Type ( types+=Type)*)?
	(functions+=Function ( "," functions+=Function)*)?
	;
	
Comment returns Comment:
	SingleLineComment | MultiLinesComment
;

Type returns Type:
	Int0 | Void | Unit | String0 | Double0 | Class;

Class returns Class:
	{Class}
	'class'
	name=EString
	('(' (attributes+=Property)* ( "," attributes+=Property)* ')' )?
	'{'
		(functions+=Function (functions+=Function)*)?
	'}';

Function returns Function:
	{Function}
	'fun'
	name=EString
	'(' 
	(parameters+=Property)* ( "," parameters+=Property)* 
	')'
	':' return=[Type|EString]
	body=Body
	;
	
SingleLineComment returns SingleLineComment:
	{SingleLineComment}
	'//' content=EString
;

MultiLinesComment returns MultiLinesComment:
	{MultiLinesComment}
	'/*' (content+=EString)* ("\n*" content+=EString)*
	'*\\'
	;

EString returns ecore::EString:
	STRING | ID
	;
	
Int0 returns Int:
	{Int}
	'Int0'
	name=EString
	;

Void returns Void:
	{Void}
	'Void0'
	name=EString
	;

Unit returns Unit:
	{Unit}
	'Unit0'
	name=EString
	;

String0 returns String:
	{String}
	'String0'
	name=EString
	;
	
Double0 returns Double:
	{Double}
	'Double0'
	name=EString
	;

Property returns Property:
	{Property}
	(name=EString ((':' type=[Type|EString]) | ('=' type=[Class|EString])))
	| (type=[Type|EString])
	;

Instruction returns Instruction:
	VariableDeclaration | ClassDeclaration | PrimitiveOperation
	;


PrimitiveOperation returns PrimitiveOperation:
	Multiplication// | Return
	;

Multiplication returns Multiplication:
	firstOperand=[Property|EString] "*" secondOperand=[Property|EString]
	;

/*Return returns Return:
	"return" ((returnOpe=[Multiplication|EString]) | (returnValue=[Property|EString]))
	;*/

ClassDeclaration returns ClassDeclaration:
	{ClassDeclaration}
	'val' name=EString '=' class=[Class|EString] '(' parameters+=EString ( "," parameters+=EString)* ')'
;

VariableDeclaration returns VariableDeclaration:
	{VariableDeclaration}
	'val' variable=Property
	;

Body returns Body:
	{Body}
	'{'
		(instructions+=Instruction ';' ( instructions+=Instruction ';')*)?
		(comments+=Comment ( comments+=Comment)*)?
	'}'
	;