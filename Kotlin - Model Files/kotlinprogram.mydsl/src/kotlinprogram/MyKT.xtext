// automatically generated by Xtext
grammar kotlin.language.MyKT with org.eclipse.xtext.common.Terminals

import "http://www.example.org/kotlinMetaModel" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/emf/2003/XMLType" as type

KotlinProgram returns KotlinProgram:
	{KotlinProgram}
	(imports+=[Package|EString] ( "," imports+=[Package|EString])*)?
	(types+=Type ("," types+=Type)*)?
	(comments+=Comment ( "," comments+=Comment)*)?
	(functions+=Function ("," functions+=Function)*)?
	;
	
EString returns ecore::EString:
	STRING | ID;
	

Type returns Type:
	Class | PrimitiveType;

Comment returns Comment:
	SingleLineComment;// | MultipleLinesComment;*/

Instruction returns Instruction:
	VariableDeclaration | BinaryOperation | SimpleInstruction | FunctionCall;

Package returns Package:
	{Package}
	'Package'
	name=EString
	'{'
		('full_path' full_path=EString)?
		('parent' parent=[Package|EString])?
	'}';

PrimitiveType returns PrimitiveType:
	{PrimitiveType}
	'primitive' name=EString ';';

Class returns Class:
	{Class}
	'class'
	name=EString
	//attr in params
	'('
		(attributes+=Property ( "," attributes+=Property)* )?
	')'
	'{'
		(functions+=Function ( "," functions+=Function)*)?
	'}';

Function returns Function:
	'fun'
	name=EString
	"()"?
	('(' parameters+=Property ( "," parameters+=Property)* ')' )?
	'{'
		body=Body
		'return' return=[Type|EString]
	'}';

Int0 returns Int:
	{Int}
	'Int'
	;

Void returns Void:
	{Void}
	'Void'
	;

Unit returns Unit:
	{Unit}
	'Unit'
	;

String0 returns String:
	{String}
	'String'
	;

AnySimpleType returns type::AnySimpleType:
	'AnySimpleType'; // TODO: implement this rule and an appropriate IValueConverter;

SingleLineComment returns SingleLineComment:
	{SingleLineComment}
	'SingleLineComment'
	'//' (content=EString)?
	;

MultipleLinesComment returns MultipleLinesComment:
	{MultipleLinesComment}
	'MultipleLinesComment'
	'/*'
		content=EString //TODO: change model for cardinality
	'*/';

Property returns Property:
	name=EString ':' type=[Type|EString];

Body returns Body:
	{Body}
	//(comments+=Comment ( "," comments+=Comment)*)?
	(instructions+=Instruction ( "," instructions+=Instruction)*)?
	;

VariableDeclaration returns VariableDeclaration:
	{VariableDeclaration}
	"let" name=EString "="
	type=[Type|EString]
	"("
	(parameters+=[Property|EString] ",")*
	")"
	";";

BinaryOperation returns BinaryOperation:
	{BinaryOperation}
	"self." leftAttribute=EString
	"*"
	"self." rightAttribute=EString;

SimpleInstruction returns SimpleInstruction:
	{SimpleInstruction}
	line=EString;

FunctionCall returns FunctionCall:
	{FunctionCall}
	name=EString "!"? "("
	content+=FunctionContent (content+=FunctionContent)*
	");";

FunctionContent returns ecore::EString:
	EString
	"."? "()"? ","?;
