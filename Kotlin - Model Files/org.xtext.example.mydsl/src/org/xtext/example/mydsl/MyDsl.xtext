// automatically generated by Xtext
grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "http://www.example.org/kotlinMetaModel"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/emf/2003/XMLType" as type

KotlinProgram returns KotlinProgram:
	{KotlinProgram}
	(classes+=Class ("," classes+=Class)*)?
//	('fileName' fileName=EString)?
	('import' '(' imports+=[Package|EString] ("," imports+=[Package|EString])* ')')?
	(types+=Type ("," types+=Type)*)?
	(comments+=Comment ("," comments+=Comment)*)?
	(functions+=Function ("," functions+=Function)*)?;

Type returns Type:
	Int0 | Void | Unit | String0 | Class;

Comment returns Comment:
	SingleLineComment | MultipleLinesComment;

Instruction returns Instruction:
	VariableDeclaration | BinaryOperation | SimpleInstruction | FunctionCall;

Package returns Package:
	{Package}
	'package'
	name=EString
	(parent=[Package|EString])?
	(full_path=EString)?;

EString returns ecore::EString:
	STRING | ID;

Class returns Class:
	{Class}
	'class'
	name=EString
	'(' (attributes+=Property ("," attributes+=Property)*)? ')'
	'{'
	(functions+=Function ("," functions+=Function)*)?
	'}';

Function returns Function:
	'fun'
	name=EString
	'(' (parameters+=Property ("," parameters+=Property)*)? ')'
	(':' return=[Type|EString])?
	'{'
	body=Body
	'}';

Int0 returns Int:
	{Int}
	'Int';

Void returns Void:
	{Void}
	'Void';
//	name=EString;

Unit returns Unit:
	{Unit}
	'Unit'
	name=EString;

String0 returns String:
	{String}
	'String'
	name=EString;

AnySimpleType returns type::AnySimpleType:
	'AnySimpleType' /* TODO: implement this rule and an appropriate IValueConverter */ ;

SingleLineComment returns SingleLineComment:
	{SingleLineComment}
	'SingleLineComment'
	'{'
	('content' content=AnySimpleType)?
	'}';

MultipleLinesComment returns MultipleLinesComment:
	{MultipleLinesComment}
	'/*'
	(content=AnySimpleType)?
	'*/';

Property returns Property:
	'var'
	name=EString
	':'
	type=[Type|EString];

Body returns Body:
	{Body}
	(comments+=Comment ("," comments+=Comment)*)?
	(('return')? instructions+=Instruction ("," instructions+=Instruction)*)?;

VariableDeclaration returns VariableDeclaration:
	'val'
	name=EString
	'='
	type=[Type|EString]
	('(' parameters+=[Property|EString] ("," parameters+=[Property|EString])* ')')?;

BinaryOperation returns BinaryOperation:
	leftAttribute=EString
	'*'
	rightAttribute=EString;

SimpleInstruction returns SimpleInstruction:
	'line' line=EString
	;

FunctionCall returns FunctionCall:
	{FunctionCall}
	name=EString
	'('
	(content+=EString ("," content+=EString)*)?
//	(EString (',' EString)* )?
	')';
